{"ts":1358065120473,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/**\n * Module dependencies.\n */\n\nvar mongoose = require('mongoose')\n  , Schema = mongoose.Schema;\n\n/**\n * Schema definition\n */\n\n// recursive embedded-document schema\n\nvar Comment = new Schema();\n\nComment.add({\n    title     : { type: String, index: true }\n  , date      : Date\n  , body      : String\n  , comments  : [Comment]\n});\n\nvar BlogPost = new Schema({\n    title     : { type: String, index: true }\n  , slug      : { type: String, lowercase: true, trim: true }\n  , date      : Date\n  , buf       : Buffer\n  , comments  : [Comment]\n  , creator   : Schema.ObjectId\n});\n\nvar Person = new Schema({\n    name: {\n        first: String\n      , last : String\n    }\n  , email: { type: String, required: true, index: { unique: true, sparse: true } }\n  , alive: Boolean\n});\n\n/**\n * Accessing a specific schema type by key\n */\n\nBlogPost.path('date')\n.default(function(){\n   return new Date()\n })\n.set(function(v){\n   return v == 'now' ? new Date() : v;\n });\n\n/**\n * Pre hook.\n */\n\nBlogPost.pre('save', function(next, done){\n  emailAuthor(done); // some async function\n  next();\n});\n\n/**\n * Methods\n */\n\nBlogPost.methods.findCreator = function (callback) {\n  return this.db.model('Person').findById(this.creator, callback);\n}\n\nBlogPost.statics.findByTitle = function (title, callback) {\n  return this.find({ title: title }, callback);\n}\n\nBlogPost.methods.expressiveQuery = function (creator, date, callback) {\n  return this.find('creator', creator).where('date').gte(date).run(callback);\n}\n\n/**\n * Plugins\n */\n\nfunction slugGenerator (options){\n  options = options || {};\n  var key = options.key || 'title';\n\n  return function slugGenerator(schema){\n    schema.path(key).set(function(v){\n      this.slug = v.toLowerCase().replace(/[^a-z0-9]/g, '').replace(/-+/g, '');\n      return v;\n    });\n  };\n};\n\nBlogPost.plugin(slugGenerator());\n\n/**\n * Define model.\n */\n\nmongoose.model('BlogPost', BlogPost);\nmongoose.model('Person', Person);\n"]],"start1":0,"start2":0,"length1":0,"length2":1928}]],"length":1928}

{"ts":1358060396139,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nMigrating from v1.x to 2.x\n==========================\n\nMigrating from __v1.x__ to __2.x__ brings with it a few changes to be aware of.\n\n## Auto-reconnect\n\nPreviously the `auto_reconnect` option of the node-mongodb-driver\ndefaulted to false. It now defaults to true so if your connection drops\nwhile your app is running the driver will continue retrying until it\ncan connect again.\n\n## Private props\n\nSeveral internal instance props have had name changes so its more obvious that\nthey are not intended for public use. Namely `instance.doc` has changed\nto `instance._doc` since it contains the structure Mongoose relies on\nto operate properly and should only be manipulated with caution.\n\nHere are the relavent changes:\n\n    var thing = new Thing;\n\n    thing.doc             -> thing._doc\n    thing.activePaths     -> thing._activePaths\n    thing.saveError       -> thing._saveError\n    thing.validationError -> thing._validationError\n\n## Circular refs in getters\n\nPreviously Mongoose exibited very odd behavior with getters:\n\n    toy.color.color.color.color ... // actually worked!\n\nObviously this was wrong and has now been fixed.\n\n    toy.color.color // undefined\n\n## Getter / Setter scope\n\nNested getter/setter scopes were set incorrectly since version 1.7 or so.\nThis has been fixed. In your getter/setter, `this` now properly refers\nto the instance.\n\n    var SongSchema = new Schema({\n        title: String\n      , detail: {\n            format: String\n        }\n    });\n\n    SongSchema.path('detail.format').get(function () {\n      console.log(this !== this.detail) // true, used to be false\n    });\n\nYou may not have noticed this bug since the circular getters previously\nmasked (_mostly_) this bad behavior.\n\n## Setters application\n\nSetters are no longer applied when the doc returns from the db (bug). It\ncaused problems for folks trying to use setters for passwords / salts\nresulting in doubly hashed passwords after queries.\n\n    UserSchema.path('password').set(function (val) {\n      // now only runs when you change `user.password`\n      // not when the doc returns from the db\n    });\n\n## Query#bind\n\nIf you were using the `Query` object directly and calling its `bind`\nmethod, the v1.x behavior cloned the query and returned the\nnew one. This is no longer the case. The query is now simply\nbound and returns itself.\n\n## Multiple collection support removed\n\nIn 1.x Mongoose had support for multiple collection names per model. This\nwas an edge case and support for it has been removed.\n\n## Compat.js removed\n\nBackward compatibility with verions 0.x has been removed.\n\n    require('mongoose').compat = true // no longer does anything\n\n## Utils.erase removed\n\nWe removed utils.erase since it was unused in the project. If you were\nusing it you'll need to copy it from the 1.x branch into your own.\n\n## Error handling\n\nPreviously, the error returned after failed validation contained an `errors`\nobject which was a hash of path keys to error message values.\nNow the Error returned is more helpful. Instead of the `errors`\nobject containing string values it holds the actual\nValidatorError. Each ValidatorError has a `type` and `path` property\nproviding us with a little more error handling flexibility.\n\n    var ToySchema = new Schema({\n        color: String\n      , name: String\n    });\n\n    var Toy = db.model('Toy', ToySchema);\n\n    Toy.schema.path('name').validate(function (value) {\n      return /blue|green|white|red|orange|periwinkel/i.test(value);\n    }, 'Invalid color');\n\n    var toy = new Toy({ color: 'grease'});\n\n    toy.save(function (err) {\n      // previous behavior (v1x):\n\n      console.log(err.errors.color)\n      // prints 'Validator \"Invalid color\" failed for path color'\n\n      // new v2x behavior - err.errors.color is a ValidatorError object\n\n      console.log(err.errors.color.message)\n      // prints 'Validator \"Invalid color\" failed for path color'\n\n      // you can get v1 behavior back by casting error.color toString\n\n      console.log(String(err.errors.color))\n      // prints 'Validator \"Invalid color\" failed for path color'\n\n      console.log(err.errors.color.type);\n      // prints \"Invalid color\"\n\n      console.log(err.errors.color.path)\n      // prints \"color\"\n\n      console.log(err.name)\n      // prints \"ValidationError\"\n\n      console.log(err.message)\n      // prints \"Validation failed\"\n    });\n\nBTW, the `err.errors` object is also available on the model instance.\n\n    toy.errors.color.message === err.errors.color.message\n\n"]],"start1":0,"start2":0,"length1":0,"length2":4480}]],"length":4480}

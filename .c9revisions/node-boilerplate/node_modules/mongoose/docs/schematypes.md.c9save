{"ts":1358065659116,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nSchema Types\n============\n\n`SchemaType`s take care of validation, casting, defaults, and other general\noptions in our models. We can specify our types one of two ways:\n\n    // directly without options\n    var Person = new Schema({\n        title   : String\n    });\n\n    // or with options\n    var Person = new Schema({\n        title   : { type: String, lowercase: true }\n    });\n\nIn the example above we specified the `lowercase` option for strings which\nwill lowercase the string whenever it is set. Options are functions that are\ncalled on each SchemaType. Each `SchemaType` has its own set of custom options.\n\n## Available Schema Types\n\n### String\n\n  - `lowercase`: {Boolean}\n\n    Creates a setter which calls `.toLowerCase()` on the value\n\n  - `uppercase`: {Boolean}\n\n    Creates a setter which calls `.toUpperCase()` on the value\n\n  - `trim`: {Boolean}\n\n    Creates a setter which calls `.trim()` on the value\n\n  - `match`: {RegExp}\n\n    Creates a RegExp based [validator](/docs/validation.html). The value being set is `.test()`ed\n    against the RegExp. If it does not pass, validation will fail.\n\n  - `enum`: {Array}\n\n    Creates an enum validator. If the value being set is not in this\n    array, validation will fail.\n\n### Number\n\n  - `min`: {Number}\n\n    Creates a validator which checks that the value being set is not less\n    than the value specified.\n\n  - `max`: {Number}\n\n    Creates a validator which checks that the value being set is not greater\n    than the value specified.\n\n### Date\n\n  - no custom options\n\n### Boolean\n\n  - no custom options\n\n### Buffer (v2.x only)\n\n  - no custom options\n\n### ObjectId\n\n  To specify a type of `ObjectId`, use `Schema.ObjectId` in your declaration.\n\n    var mongoose = require('mongoose');\n    var Schema = mongoose.Schema;\n    var Car = new Schema({ driver: Schema.ObjectId })\n\n  - no custom options\n\n### Mixed\n\n  An \"anything goes\" `SchemaType`, its flexibility comes at a trade-off of it being\n  harder to maintain. `Mixed` is available either through `Schema.Types.Mixed` or\n  by passing an empty object literal. The following are equivalent:\n\n    var Any = new Schema({ any: {} });\n    var Any = new Schema({ any: Schema.Types.Mixed });\n\n  Since it is a schema-less type, you can change the value to anything else\n  you like, but Mongoose loses the ability to auto detect/save those changes.\n  To \"tell\" Mongoose that the value of a `Mixed` type has changed, call\n  the `.markModified(path)` method of the document passing the path to\n  the `Mixed` type you just changed.\n\n    person.anything = { x: [3, 4, { y: \"changed\" }] };\n    person.markModified('anything');\n    person.save(); // anything will now get saved\n\n  - no custom options\n\n### Array\n\n  Creates an array of `SchemaTypes` or [Embedded Documents](/docs/embedded-documents.html).\n\n    var ToySchema = new Schema({ name: String });\n    var ToyBox = new Schema({\n        toys: [ToySchema]\n      , buffers: [Buffer]\n      , string:  [String]\n      , numbers: [Number]\n      ... etc\n    });\n\n  Note: specifying an empty array is equivalent to `[Mixed]`. The following all\n  create arrays of `Mixed`:\n\n    var Empty1 = new Schema({ any: [] });\n    var Empty2 = new Schema({ any: Array });\n    var Empty3 = new Schema({ any: [Schema.Types.Mixed] });\n    var Empty4 = new Schema({ any: [{}] });\n\n  - no custom options\n\n## Additional options\n\nBesides the options listed above, all SchemaTypes share the following additional\noptions.\n\n  - `default`: {Function|value} - Determines the default value for the path. All values are casted. If using a function, the value it returns will be casted as the default value.\n\n  - `required`: {Boolean} - If true, creates a validation rule requiring this path be set before saving occurs.\n\n  - `get`: {Function} - Adds a getter for this path. See the [getters / setters](/docs/getters-setters.html) docs for more detail.\n\n  - `set`: {Function} - Adds a setter for this path. See the [getters / setters](/docs/getters-setters.html) docs for more detail.\n\n  - `index`: {Boolean|Object} - Tells Mongoose to ensure an index is created for this path. An object can be passed as well.\n\n        var Person = new Schema({ name: String, index: true })\n        var Person = new Schema({ name: String, index: { unique: true }})\n\n    Note: indexes cannot be created for `Buffer` `SchemaTypes`. <br>\n    Note: if the index already exists on the db, it will _not_ be replaced.\n\n  - `unique`: {Boolean} - Tells Mongoose to ensure a unique index is created for this path. The following are equivalent:\n\n        var Person = new Schema({ name: String, unique: true })\n        var Person = new Schema({ name: String, index: { unique: true }})\n\n    Note: indexes cannot be created for `Buffer` `SchemaTypes`. <br>\n    Note: if the index already exists on the db, it will _not_ be replaced.\n\n  - `sparse`: {Boolean} - Tells Mongoose to ensure a sparse index is created for this path. The following are equivalent:\n\n        var Person = new Schema({ name: String, sparse: true })\n        var Person = new Schema({ name: String, index: { sparse: true }})\n\n    Note: indexes cannot be created for `Buffer` `SchemaTypes`. <br>\n    Note: if the index already exists on the db, it will _not_ be replaced.\n\n  - `validate`: {Function|RegExp|Array} - Creates a [validator](/docs/validation.html) for this path.\n\n        // passing a function\n        function hasNumber (v) {\n          return v.length && /\\d/.test(v);\n        }\n        var Person = new Schema({ street: String, validate: hasNumber });\n        \n        // passing a RegExp\n        var Person = new Schema({ street: String, validate: /\\d/ });\n        \n        // passing an array\n        var Person = new Schema({ street: String, validate: [hasNumber, 'street number required'] });\n        \n        // or\n        var Person = new Schema({ street: String, validate: [/\\d/, 'street number required'] });\n\n      For more detail about validation including async validation, see the [validation](/docs/validation.html) page.\n\n## Alternate options definition\n\nInstead of defining options when instanciating your `Schema` we can also\naccess keys through the `path` function and add options there:\n\n    Person.path('age').max(400);\n\n    Person.path('meta.birth').set(function (v) {\n      // this is a setter\n    });\n\n    Person.path('title').validate(function (v) {\n      return v.length > 50;\n    });\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":6383}]],"length":6383}

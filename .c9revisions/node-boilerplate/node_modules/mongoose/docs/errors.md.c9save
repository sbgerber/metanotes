{"ts":1358065052897,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nError handling\n==============\n\nErrors returned after failed validation contain an `errors` object\nholding the actual ValidatorErrors. Each ValidatorError has a `type` and `path` property\nproviding us with a little more error handling flexibility.\n\n    var ToySchema = new Schema({\n        color: String\n      , name: String\n    });\n\n    var Toy = db.model('Toy', ToySchema);\n\n    Toy.schema.path('name').validate(function (value) {\n      return /blue|green|white|red|orange|periwinkel/i.test(value);\n    }, 'Invalid color');\n\n    var toy = new Toy({ color: 'grease'});\n\n    toy.save(function (err) {\n      // previous behavior (v1x):\n\n      console.log(err.errors.color)\n      // prints 'Validator \"Invalid color\" failed for path color'\n\n      // new v2x behavior - err.errors.color is a ValidatorError object\n\n      console.log(err.errors.color.message)\n      // prints 'Validator \"Invalid color\" failed for path color'\n\n      // you can get v1 behavior back by casting error.color toString\n\n      console.log(String(err.errors.color))\n      // prints 'Validator \"Invalid color\" failed for path color'\n\n      console.log(err.errors.color.type);\n      // prints \"Invalid color\"\n\n      console.log(err.errors.color.path)\n      // prints \"color\"\n\n      console.log(err.name)\n      // prints \"ValidationError\"\n\n      console.log(err.message)\n      // prints \"Validation failed\"\n    });\n\nBTW, the `err.errors` object is also available on the model instance.\n\n    toy.errors.color.message === err.errors.color.message\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1515}]],"length":1515}

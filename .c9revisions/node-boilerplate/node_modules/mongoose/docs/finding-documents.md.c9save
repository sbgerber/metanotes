{"ts":1358065060531,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nQuerying\n=================\n\nDocuments can be retrieved through `find`, `findOne` and `findById`. These\nmethods are executed on your `Model`s.\n\n## Model.find\n\n    Model.find(query, fields, options, callback)\n\n    // fields and options can be omitted\n\n### Simple query:\n\n    Model.find({ 'some.value': 5 }, function (err, docs) {\n      // docs is an array\n    });\n\n### Retrieving only certain fields\n\n    Model.find({}, ['first', 'last'], function (err, docs) {\n      // docs is an array of partially-`init`d documents\n      // defaults are still applied and will be \"populated\"\n    })\n\n## Model.findOne\n\nSame as `Model#find`, but only receives a single document as second parameter:\n\n    Model.findOne({ age: 5}, function (err, doc){\n      // doc is a Document\n    });\n\n## Model.findById\n\nSame as `findOne`, but receives a value to search a document by their `_id`\nkey. This value is subject to casting, so it can be a hex string or a proper \nObjectId.\n\n    Model.findById(obj._id, function (err, doc){\n      // doc is a Document\n    });\n\n## Model.count\n\nCounts the number of documents matching `conditions`.\n\n    Model.count(conditions, callback);\n\n## Model.remove\n\nRemoves documents matching `conditions`.\n\n    Model.remove(conditions, callback);\n\n## Model.distinct\n\nFinds distinct values of `field` for documents matching `conditions`.\n\n    Model.distinct(field, conditions, callback);\n\n## Model.where\n\nCreates a Query for this model.\nHandy when expressing complex directives.\n\n    Model\n    .where('age').gte(25)\n    .where('tags').in(['movie', 'music', 'art'])\n    .select('name', 'age', 'tags')\n    .skip(20)\n    .limit(10)\n    .asc('age')\n    .slaveOk()\n    .hint({ age: 1, name: 1 })\n    .run(callback);\n\n## Model.$where\n\nSometimes you need to query for things in mongodb using a JavaScript\nexpression. You can do so via find({$where: javascript}), or you can\nuse the mongoose shortcut method $where via a Query chain or from\nyour mongoose Model.\n\n    Model.$where('this.firstname === this.lastname').exec(callback)\n\n## Model.update\n\nUpdates all documents matching `conditions` using the `update` clause. All\n`update` values are casted to their appropriate types before being sent.\n\n    var conditions = { name: 'borne' }\n      , update = { $inc: { visits: 1 }}\n      , options = { multi: true };\n\n    Model.update(conditions, update, options, callback)\n\nNote: for backwards compatibility, all top-level `update` keys that are\nnot $atomic operation names are treated as `$set` operations. Example:\n\n    var query = { name: 'borne' };\n    Model.update(query, { name: 'jason borne' }, options, callback)\n\n    // is sent as\n\n    Model.update(query, { $set: { name: 'jason borne' }}, options, callback)\n\n## Query\n\nEach of these methods returns a [Query](https://github.com/LearnBoost/mongoose/blob/master/lib/query.js).\nIf you don't pass a callback to these methods, the Query can be continued to be\nmodified (such as adding options, fields, etc), before it's `exec`d.\n\n    var query = Model.find({});\n\n    query.where('field', 5);\n    query.limit(5);\n    query.skip(100);\n\n    query.exec(function (err, docs) {\n      // called when the `query.complete` or `query.error` are called\n      // internally\n    });\n"]],"start1":0,"start2":0,"length1":0,"length2":3214}]],"length":3214}

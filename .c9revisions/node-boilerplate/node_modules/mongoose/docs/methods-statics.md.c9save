{"ts":1358065071958,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Methods and Statics\n====================\n\nEach `Schema` can define instance and static methods for its model.\n\n## Methods\n\nMethods are easy to define:\n\n    var AnimalSchema = new Schema({\n        name: String\n      , type: String\n    });\n\n    AnimalSchema.methods.findSimilarType = function findSimilarType (cb) {\n      return this.find({ type: this.type }, cb);\n    };\n\nNow when we have an instance of `Animal` we can call our `findSimilarType` method and\nfind all animals with a matching `type`.\n\n    var Animal = mongoose.model('Animal', AnimalSchema);\n    var dog = new Animal({ name: 'Rover', type: 'dog' });\n\n    dog.findSimilarType(function (err, dogs) {\n      if (err) return ...\n      dogs.forEach(..);\n    })\n\nNote that we return what `.find()` returns in our method. The advantages are two-fold.\nFirst, by passing `cb` into `find` we are making it optional b/c `find` called\nwithout a callback will not run the query. Secondly, `this.find`, `this.where`,\nand other Model methods return instances of [Query](/docs/finding-documents.html)\nwhich allow us to further utilize its expressive capabilities.\n\n    dog\n    .findSimilarType()\n    .where('name': /rover/i)\n    .limit(20)\n    .run(function (err, rovers) {\n      if (err) ...\n    })\n\n## Statics\n\nStatics are pretty much the same as methods but allow for defining functions that\nexist directly on your Model.\n\n    AnimalSchema.statics.search = function search (name, cb) {\n      return this.where('name', new RegExp(name, 'i')).run(cb);\n    }\n\n    Animal.search('Rover', function (err) {\n      if (err) ...\n    })\n"]],"start1":0,"start2":0,"length1":0,"length2":1577}]],"length":1577}

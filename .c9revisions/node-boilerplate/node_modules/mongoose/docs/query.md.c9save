{"ts":1358065093814,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nQueries\n=================\n\nA `Query` is what is returned when calling many `Model`\n[methods](/docs/finding-documents.html). These `Query`\nobjects provide a chaining api to specify search terms,\ncursor options, hints, and other behavior.\n\n## Query#where\n\nLets you specify query terms with sugar.\n\n    query.where(path [, val])\n\n`path` is a valid document path. `val` is optional. Its useful to omit\n`val` when used in conjunction with other query methods. For example:\n\n    query\n    .where('name', 'Space Ghost')\n    .where('age').gte(21).lte(65)\n    .run(callback)\n\nIn this case, `gte()` and `lte()` operate on the previous path if not\nexplicitly passed. The above query results in the following query expression:\n\n    { name: 'Space Ghost', age: { $gte: 21, $lte: 65 }}\n\n## Query#$where\n\nSpecifies the javascript function to run on MongoDB on each document scanned.\nSee the [MongoDB docs](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-JavascriptExpressionsand%7B%7B%24where%7D%7D) for details.\n\n    Model.find().$where(fn)\n\n`fn` can be either a function or a string.\n\n## Query#$or, Query#or\n\nSpecifies the [$or](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24or) operator.\n\n    query.$or(array);\n\n`array` is an array of expressions.\n\n    query.or([{ color: 'blue' }, { color: 'red' }]);\n\n## Query#gt, Query#$gt\n\nSpecifies a [greater than](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%3C%2C%3C%3D%2C%3E%2C%3E%3D) expression.\n\n    query.$gt(path, val);\n\n`$gt` is also one of the methods with extra chaining sugar: when only one\nargument is passed, it uses the path used the last call to `where()`. Example:\n\n    Model.where('age').$gt(21)\n\nResults in:\n\n    { age: { $gt: 21 }}\n\n## Query#gte, Query#$gte\n\nSpecifies a [greater than or equal to](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%3C%2C%3C%3D%2C%3E%2C%3E%3D) expression.\n\n    query.$gte(path, val);\n\n`$gte` is also one of the methods with extra chaining sugar: when only one\nargument is passed, it uses the path used the last call to `where()`. Example:\n\n    Model.where('age').$gte(21)\n\nResults in:\n\n    { age: { $gte: 21 }}\n\n## Query#lt,Query#$lt\n\nSpecifies a [less than](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%3C%2C%3C%3D%2C%3E%2C%3E%3D) expression.\n\n    query.$lt(path, val);\n\n`$lt` is also one of the methods with extra chaining sugar: when only one\nargument is passed, it uses the path used the last call to `where()`. Example:\n\n    Model.where('age').$lt(21)\n\nResults in:\n\n    { age: { $lt: 21 }}\n\n## Query#lte, Query#$lte\n\nSpecifies a [less than or equal to](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%3C%2C%3C%3D%2C%3E%2C%3E%3D) expression.\n\n    query.$lte(path, val);\n\n`$lte` is also one of the methods with extra chaining sugar: when only one\nargument is passed, it uses the path used the last call to `where()`. Example:\n\n    Model.where('age').$lte(21)\n\nResults in:\n\n    { age: { $lte: 21 }}\n\n## Query#ne, Query#$ne, Query#notEqualTo\n\nSpecifies the [$ne](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24ne) operator.\n\n    query.$ne(path, val);\n\nThese methods have extra sugar in that\nwhen only one argument is passed, the path in the last call\nto `where()` is used. Example:\n\n    query.where('_id').ne('4ecf92f31993a52c58e07f6a')\n\nand\n\n    query.notEqualTo('_id', '4ecf92f31993a52c58e07f6a')\n\nboth result in\n\n    { _id: { $ne: ObjectId('4ecf92f31993a52c58e07f6a') }}\n\n## Query#in, Query#$in\n\nSpecifies the [$in](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24in) operator.\n\n    query.$in(path, array)\n\nThese methods have extra sugar in that\nwhen only one argument is passed, the path in the last call\nto `where()` is used.\n\n    query.where('tags').in(['game', 'fun', 'holiday'])\n\nresults in\n\n    { tags: { $in: ['game', 'fun', 'holiday'] }}\n\n## Query#nin, Query#$nin\n\nSpecifies the [$nin](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24nin) operator.\n\n    query.$nin(path, array)\n\nThese methods have extra sugar in that\nwhen only one argument is passed, the path in the last call\nto `where()` is used.\n\n    query.where('games').nin(['boring', 'lame'])\n\nresults in\n\n    { games: { $nin: ['boring', 'lame'] }}\n\n## Query#all, Query#$all\n\nSpecifies the [$all](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24all) operator.\n\n    query.$all(path, array)\n\nThese methods have extra sugar in that\nwhen only one argument is passed, the path in the last call\nto `where()` is used.\n\n    query.where('games').all(['fun', 'exhausting'])\n\nresults in\n\n    { games: { $all: ['fun', 'exhausting'] }}\n\n## Query#regex, Query#$regex\n\nSpecifies the [$regex](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-RegularExpressions) operator.\n\n    query.regex('name.first', /^a/i)\n\nThese methods have extra sugar in that\nwhen only one argument is passed, the path in the last call\nto `where()` is used.\n\n    query.where('name.first').$regex(/^a/i)\n\nresults in\n\n    { 'name.first': { $regex: /^a/i }}\n\n## Query#size, Query#$size\n\nSpecifies the [$size](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24size) operator.\n\n    query.$size(path, integer)\n\nThese methods have extra sugar in that\nwhen only one argument is passed, the path in the last call\nto `where()` is used.\n\n    query.size('comments', 2)\n    query.where('comments').size(2)\n\nboth result in\n\n    { comments: { $size: 2 }}\n\n## Query#mod, Query#$mod\n\nSpecifies the [$mod](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24mod) operator.\n\n    var array = [10, 1]\n    query.mod(path, array)\n\n    query.mod(path, 10, 1)\n\n    query.where(path).$mod(10, 1)\n\nall result in\n\n    { path: { $mod: [10, 1] }}\n\n## Query#exists, Query#$exists\n\nSpecifies the [$exists](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24exists) operator.\n\n    query.exists(path, Boolean)\n\nThese methods have extra sugar in that\nwhen only one argument is passed, the path from the last call\nto `where()` is used.\n\nGiven the following query,\n\n    var query = Model.find();\n\nthe following queries\n\n    query.exists('occupation');\n    query.exists('occupation', true);\n    query.where('occupation').exists();\n\nall result in\n\n    { occupation: { $exists: true }}\n\nAnother example:\n\n    query.exists('occupation', false)\n    query.where('occupation').exists(false);\n\nresult in\n\n    { occupation: { $exists: false }}\n\n## Query#elemMatch, Query#$elemMatch\n\nSpecifies the [$elemMatch](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24elemMatch) operator.\n\n    query.elemMatch(path, criteria)\n    query.where(path).elemMatch(criteria)\n\nFunctions can also be passed so you can further use query sugar\nto declare the expression:\n\n    query.where(path).elemMatch(function)\n    query.elemMatch(path, function)\n\nIn this case a `query` is passed as the only argument into the function.\n\n    query.where('comments').elemMatch(function (elem) {\n      elem.where('author', 'bnoguchi')\n      elem.where('votes').gte(5);\n    });\n\nResults in\n\n    { comments: { $elemMatch: { author: 'bnoguchi', votes: { $gte: 5 }}}}\n\n## Query#within, Query#$within\n\n## Query#box, Query#$box\n\n## Query#center, Query#$center\n\n## Query#centerSphere, Query#$centerSphere\n\n## Query#near, Query#$near\n\nSpecifies the [$near](http://www.mongodb.org/display/DOCS/Geospatial+Indexing#GeospatialIndexing-Querying) operator.\n\n    var array = [10, 1]\n    query.near(path, array)\n\n    query.near(path, 10, 1)\n\n    query.where(path).$near(10, 1)\n\nall result in\n\n    { path: { $near: [10, 1] }}\n\n## Query#maxDistance, Query#$maxDistance\n\nSpecifies the [$maxDistance](http://www.mongodb.org/display/DOCS/Geospatial+Indexing#GeospatialIndexing-Querying) operator.\n\n    query.where('checkin').near([40, -72]).maxDistance(1);\n\nresults in\n\n    { checkin: { $near: [40, -72], $maxDistance: 1 }}\n\n## Query#select\n## Query#fields\n\n## Query#only\n## Query#exclude\n\n## Query#slice\n## Query#$slice\n\n## Query#populate\n\n// sorting\n## Query#sort\n## Query#asc\n## Query#desc\n\n// options\n## Query#limit\n## Query#skip\n## Query#maxscan\n## Query#snapshot\n## Query#batchSize\n## Query#slaveOk\n## Query#hint\n\n// executing\n## Query#find\n\n    query.find(criteria [, callback])\n\n## Query#findOne\n## Query#count\n## Query#distinct\n## Query#update\n## Query#remove\n\n## Query#run\n## Query#exec\n\n    query.run([callback])\n\n## Query#each\n\n## Query#stream\n\nReturns a [QueryStream](/docs/querystream.html) for the query.\n\n    Model.find({}).stream().pipe(writeStream)\n\n"]],"start1":0,"start2":0,"length1":0,"length2":8615}]],"length":8615}

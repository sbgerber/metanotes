{"ts":1358064963375,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nEmbedded Documents\n==================\n\nEmbedded documents are documents with schemas of their own that are part of\nother documents (as items within an array).\n\nEmbedded documents enjoy all the same features as your models. Defaults,\nvalidators, middleware. Whenever an error occurs, it's bubbled to the `save()`\nerror callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of\nthe box.\n\n## Definition and initialization\n\nWhen you define a Schema like this:\n\n    var Comments = new Schema({\n        title     : String\n      , body      : String\n      , date      : Date\n    });\n\n    var BlogPost = new Schema({\n        author    : ObjectId\n      , title     : String\n      , body      : String\n      , date      : Date\n      , comments  : [Comments]\n      , meta      : {\n            votes : Number\n          , favs  : Number\n        }\n    });\n\n    mongoose.model('BlogPost', BlogPost);\n\nThe `comments` key of your `BlogPost` documents will then be an instance of\n`DocumentArray`. This is a special subclassed `Array` that can deal with\ncasting, and has special methods to work with embedded documents.\n\n## Adding an embedded document to an array\n\n    // retrieve my model\n    var BlogPost = mongoose.model('BlogPost');\n\n    // create a blog post\n    var post = new BlogPost();\n\n    // create a comment\n    post.comments.push({ title: 'My comment' });\n\n    post.save(function (err) {\n      if (!err) console.log('Success!');\n    });\n\n## Removing an embedded document\n\n    BlogPost.findById(myId, function (err, post) {\n      if (!err) {\n        post.comments[0].remove();\n        post.save(function (err) {\n          // do something\n        });\n      }\n    });\n\n## Finding an embedded document by id\n\n`DocumentArray`s have an special method `id` that filters your embedded\ndocuments by their `_id` property (each embedded document gets one):\n\nConsider the following snippet:\n\n    post.comments.id(my_id).remove();\n    post.save(function (err) {\n      // embedded comment with id `my_id` removed!\n    });\n"]],"start1":0,"start2":0,"length1":0,"length2":2064}]],"length":2064}
